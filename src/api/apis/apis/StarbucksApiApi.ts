/* tslint:disable */
/* eslint-disable */
/**
 * starbuck api
 * starbucks api
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddProductGroupHandlerRequest,
  AddProductHandlerRequest,
  BaseResponse,
  ChargeHandlerRequest,
  CreateOrderHandlerRequest,
  CreateOrderResponse,
  LoginHandlerRequest,
  LoginResponse,
  OrderDoneHandlerRequest,
  WalletDescribeResp,
} from '../models';
import {
    AddProductGroupHandlerRequestFromJSON,
    AddProductGroupHandlerRequestToJSON,
    AddProductHandlerRequestFromJSON,
    AddProductHandlerRequestToJSON,
    BaseResponseFromJSON,
    BaseResponseToJSON,
    ChargeHandlerRequestFromJSON,
    ChargeHandlerRequestToJSON,
    CreateOrderHandlerRequestFromJSON,
    CreateOrderHandlerRequestToJSON,
    CreateOrderResponseFromJSON,
    CreateOrderResponseToJSON,
    LoginHandlerRequestFromJSON,
    LoginHandlerRequestToJSON,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    OrderDoneHandlerRequestFromJSON,
    OrderDoneHandlerRequestToJSON,
    WalletDescribeRespFromJSON,
    WalletDescribeRespToJSON,
} from '../models';

export interface AddProductGroupHandlerOperationRequest {
    addProductGroupHandlerRequest?: AddProductGroupHandlerRequest;
}

export interface AddProductHandlerOperationRequest {
    addProductHandlerRequest?: AddProductHandlerRequest;
}

export interface ChargeHandlerOperationRequest {
    chargeHandlerRequest?: ChargeHandlerRequest;
}

export interface CreateOrderHandlerOperationRequest {
    createOrderHandlerRequest?: CreateOrderHandlerRequest;
}

export interface LoginHandlerOperationRequest {
    loginHandlerRequest?: LoginHandlerRequest;
}

export interface OrderDoneHandlerOperationRequest {
    orderDoneHandlerRequest?: OrderDoneHandlerRequest;
}

export interface PayHandlerRequest {
    orderDoneHandlerRequest?: OrderDoneHandlerRequest;
}

export interface RegisterHandlerRequest {
    loginHandlerRequest?: LoginHandlerRequest;
}

/**
 * 
 */
export class StarbucksApiApi extends runtime.BaseAPI {

    /**
     */
    async addProductGroupHandlerRaw(requestParameters: AddProductGroupHandlerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ops/product_g/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProductGroupHandlerRequestToJSON(requestParameters.addProductGroupHandlerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async addProductGroupHandler(requestParameters: AddProductGroupHandlerOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.addProductGroupHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addProductHandlerRaw(requestParameters: AddProductHandlerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/ops/product/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProductHandlerRequestToJSON(requestParameters.addProductHandlerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async addProductHandler(requestParameters: AddProductHandlerOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.addProductHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chargeHandlerRaw(requestParameters: ChargeHandlerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wallet/charge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChargeHandlerRequestToJSON(requestParameters.chargeHandlerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async chargeHandler(requestParameters: ChargeHandlerOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.chargeHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createOrderHandlerRaw(requestParameters: CreateOrderHandlerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrderResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderHandlerRequestToJSON(requestParameters.createOrderHandlerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async createOrderHandler(requestParameters: CreateOrderHandlerOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrderResponse> {
        const response = await this.createOrderHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async describeWalletHandlerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WalletDescribeResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/wallet/desc`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletDescribeRespFromJSON(jsonValue));
    }

    /**
     */
    async describeWalletHandler(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WalletDescribeResp> {
        const response = await this.describeWalletHandlerRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async loginHandlerRaw(requestParameters: LoginHandlerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginHandlerRequestToJSON(requestParameters.loginHandlerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     */
    async loginHandler(requestParameters: LoginHandlerOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.loginHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async orderDoneHandlerRaw(requestParameters: OrderDoneHandlerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/done`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderDoneHandlerRequestToJSON(requestParameters.orderDoneHandlerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async orderDoneHandler(requestParameters: OrderDoneHandlerOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.orderDoneHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async payHandlerRaw(requestParameters: PayHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order/pay`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderDoneHandlerRequestToJSON(requestParameters.orderDoneHandlerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async payHandler(requestParameters: PayHandlerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.payHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async registerHandlerRaw(requestParameters: RegisterHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginHandlerRequestToJSON(requestParameters.loginHandlerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async registerHandler(requestParameters: RegisterHandlerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.registerHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
